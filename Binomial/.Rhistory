test_file("test-check-binomial.R")
##check_success
test_that("check_success with ok vectors", {
expect_true(check_success(3,5))
expect_true(check_success(10,10))
})
test_that("check_success with valid lengths", {
expect_error(check_success(c(1,2),3))
expect_error(check_success(5:10),12)
})
test_that("check_success fails with invalid numbers", {
expect_error(check_success(10.5),20)
expect_error(check_success(-5),20)
})
test_that("check_success fails with success greater than trials", {
expect_error(check_success(10),5)
})
context("Check binomial argument success")
##check_success
test_that("check_success with ok vectors", {
expect_true(check_success(3,5))
expect_true(check_success(10,10))
})
test_that("check_success with valid lengths", {
expect_error(check_success(c(1,2),3))
expect_error(check_success(5:10,12))
})
test_that("check_success fails with invalid numbers", {
expect_error(check_success(10.5,20))
expect_error(check_success(-5,20))
})
test_that("check_success fails with success greater than trials", {
expect_error(check_success(10,5))
})
library(testthat)
#library(Binomial)
#test_check("Binomial")
setwd("/Users/zhaojingtong/Desktop/STAT133/Binomial/tests/testthat")
test_file("test-check-binomial.R")
check_success <- function(success,trials) {
if (!is.numeric(success)){
stop("\n success should be a non-negative integer")
}
if (!(success == abs(round(success)))) {
stop("\n success should be a non-negative integer")
}
if (success > trials) {
stop("\n success cannot be greater than trials'")
}
TRUE
}
context("Check binomial argument success")
##check_success
test_that("check_success with ok vectors", {
expect_true(check_success(3,5))
expect_true(check_success(10,10))
})
test_that("check_success with valid lengths", {
expect_error(check_success(c(1,2),3))
expect_error(check_success(5:10,12))
})
test_that("check_success fails with invalid numbers", {
expect_error(check_success(10.5,20))
expect_error(check_success(-5,20))
})
test_that("check_success fails with success greater than trials", {
expect_error(check_success(10,5))
})
library(testthat)
#library(Binomial)
#test_check("Binomial")
setwd("/Users/zhaojingtong/Desktop/STAT133/Binomial/tests/testthat")
test_file("test-check-binomial.R")
context("Check binomial argument success")
##check_success
test_that("check_success with ok vectors", {
expect_true(check_success(3,5))
expect_true(check_success(10,10))
})
test_that("check_success with valid lengths", {
expect_true(check_success(c(1,2),3))
expect_true(check_success(5:10,12))
})
test_that("check_success fails with invalid numbers", {
expect_error(check_success(10.5,20))
expect_error(check_success(-5,20))
})
test_that("check_success fails with success greater than trials", {
expect_error(check_success(10,5))
})
library(testthat)
#library(Binomial)
#test_check("Binomial")
setwd("/Users/zhaojingtong/Desktop/STAT133/Binomial/tests/testthat")
test_file("test-check-binomial.R")
test_that("aux_mean works as expected", {
expect_equal(aux_mean(5,0.5),2.5)
expect_equal(aux_mean(2,0),0)
})
test_file("test-summary-binomial.R")
test_file("test-summary-binomial.R")
test_that("aux_mean works as expected", {
expect_equal(aux_mean(5,0.5),2.5)
expect_equal(aux_mean(2,0),0)
expect_length(aux_mean(2,0), 1)
expect_type(aux_mean(2,0), 'double')
})
test_file("test-summary-binomial.R")
aux_variance(5,0.5)
aux_variance(2,0)
test_that("aux_variance works as expected", {
expect_equal(aux_variance(5,0.5),1.25)
expect_equal(aux_variance(2,0),0)
expect_length(aux_variance(5,0.5), 1)
expect_type(aux_variance(5,0.5), 'double')
})
test_file("test-summary-binomial.R")
##aux_mode
test_that("aux_mode works as expected", {
expect_equal(aux_mode(5,0.5),floor(5*0.5 + 0.5))
expect_equal(aux_mode(2,0),floor(2*0 + 0))
expect_length(aux_mode(5,0.5), 1)
expect_type(aux_mode(5,0.5), 'double')
})
test_file("test-summary-binomial.R")
test_that("aux_skewness works as expected", {
expect_equal(aux_skewness(5,0.5),(1 - 2*0.5)/sqrt(5*0.5*(1 - 0.5)))
expect_equal(aux_skewness(2,0),(1 - 2*0)/sqrt(2*0*(1 - 0)))
expect_length(aux_skewness(5,0.5), 1)
expect_type(aux_skewness(5,0.5), 'double')
})
test_file("test-summary-binomial.R")
test_that("aux_kurtosis works as expected", {
expect_equal(aux_kurtosis(5,0.5),(1 - 6*0.5*(1 - 0.5))/(5*0.5*(1 - 0.5)))
expect_equal(aux_kurtosis(2,0),(1 - 6*0*(1 - 0))/(2*0*(1 - 0)))
expect_length(aux_kurtosis(5,0.5), 1)
expect_type(aux_kurtosis(5,0.5), 'double')
})
test_file("test-summary-binomial.R")
test_that("aux_variance works as expected", {
expect_equal(aux_variance(5,0.5),5*0.5*(1 - 0.5))
expect_equal(aux_variance(2,0),2*0*(1 - 0))
expect_length(aux_variance(5,0.5), 1)
expect_type(aux_variance(5,0.5), 'double')
})
test_file("test-summary-binomial.R")
bin_choose(5, 1:3)
##bin_choose
test_that("bin_choose fails when k > n", {
expect_error(bin_choose(5,6))
})
test_that("aux_mean works as expected", {
expect_equal(bin_choose(5,2),factorial(5)/(factorial(2)*factorial(5 - 2)))
expect_equal(bin_choose(5, 1:3),c(5,10,10))
expect_length(bin_choose(5, 1:2), 2)
expect_type(bin_choose(5,2), 'double')
})
test_file("test-binomial.R")
test_that("bin_probability fails with invalid trial value", {
expect_error(bin_probability(success = 2, trials = 6.1, prob = 0.5))
})
test_that("bin_probability fails with invalid success value", {
expect_error(bin_probability(success = -1, trials = 5, prob = 0.5))
})
test_that("bin_probability fails with invalid prob value", {
expect_error(bin_probability(success = 2, trials = 5, prob = -0.5))
})
test_file("test-binomial.R")
test_file("test-binomial.R")
test_that("bin_probability works as expected", {
expect_equal(bin_probability(2,5,0.5),0.3125)
expect_equal(bin_probability(0:2,5,0.5),0.3125,c(0.03125,0.15625,0.31250))
expect_length(bin_probability(0:2,5,0.5), 3)
expect_type(bin_probability(0:2,5,0.5), 'double')
})
test_that("bin_probability works as expected", {
expect_equal(bin_probability(2,5,0.5),0.3125)
expect_equal(bin_probability(0:2,5,0.5),c(0.03125,0.15625,0.31250))
expect_length(bin_probability(0:2,5,0.5), 3)
expect_type(bin_probability(0:2,5,0.5), 'double')
})
test_file("test-binomial.R")
test_that("bin_distribution works as expected", {
expect_equal(bin_distribution(5, 0.5),data.frame(0:trials,bin_probability(0:trials, trials, prob)))
})
test_that("bin_distribution works as expected", {
expect_equal(bin_distribution(trials = 5, prob = 0.5),data.frame(0:trials,bin_probability(0:trials, trials, prob)))
})
test_that("bin_distribution works as expected", {
expect_equal(bin_distribution(trials = 5, prob = 0.5),data.frame(0:5,bin_probability(0:5, 5, 0.5)))
})
test_that("bin_distribution works as expected", {
expect_equal(bin_distribution(trials = 5, prob = 0.5),data.frame("success"=0:5,"probability"=bin_probability(0:5, 5, 0.5)))
})
test_that("bin_distribution works as expected", {
expect_is(bin_distribution(trials = 5, prob = 0.5),"data.frame")
})
test_file("test-binomial.R")
test_that("data type in bin_distribution is correct", {
expect_is(bin_distribution(trials = 5, prob = 0.5),c("bindis","data.frame"))
})
test_file("test-binomial.R")
test_that('data dimensions are correct', {
expect_equal(ncol(bin_distribution(trials = 5, prob = 0.5)), 2)
expect_equal(nrow(bin_distribution(trials = 5, prob = 0.5)), 6)
})
test_file("test-binomial.R")
success = 0:5
probability = bin_probability(success, 5, 0.5)
dist = data.frame(success,probability)
test_that('bin_distribution works as expected', {
expect_equal(bin_distribution(trials = 5, prob = 0.5, dist))
})
test_that("data type in bin_cumulative is correct", {
expect_is(bin_cumulative(trials = 5, prob = 0.5),c("bindcum","data.frame"))
})
test_that('data dimensions are correct', {
expect_equal(ncol(bin_cumulative(trials = 5, prob = 0.5)), 3)
expect_equal(nrow(bin_cumulative(trials = 5, prob = 0.5)), 6)
})
test_file("test-binomial.R")
setwd("/Users/zhaojingtong/Desktop/STAT133/Binomial")
install.packages("devtools")
devtools::document()
getwd()
devtools::document()
devtools::document("Binomial")
getwd()
devtools::document()
devtools::document()
getwd()
devtools::document()
?devtools::document()
devtools::document("Binomial")
devtools::document()
devtools::document("Binomial")
devtools::document()
getwd()
devtools::document()
getwd()
devtools::document()
devtools::document()
# 1.1) Private Checker Functions
# private function to check if an input prob is a valid probability value
check_prob <- function(prob) {
if (length(prob) != 1) {
stop("\n prob must be a vector of length 1")
}
if (!(prob >= 0 & prob <= 1)) {
stop("\n prob has to be a number betwen 0 and 1")
}
TRUE
}
# private function to check if an input trials is a valid value for number of trials
check_trials <- function(trials) {
if (length(trials) != 1) {
stop("\n trials must be a vector of length 1")
}
if (!is.numeric(trials)){
stop("\n trials should be a non-negative integer")
}
if (!(trials == abs(round(trials)))) {
stop("\n trials should be a non-negative integer")
}
TRUE
}
# private function to check if an input success is a valid value for number of successes
check_success <- function(success,trials) {
if (!is.numeric(success)){
stop("\n success should be a non-negative integer")
}
if (!(success == abs(round(success)))) {
stop("\n success should be a non-negative integer")
}
if (success > trials) {
stop("\n success cannot be greater than trials'")
}
TRUE
}
# 1.2) Private Auxiliary Functions
# aux_mean(): the expected number of successes in n trials.
aux_mean = function(n,p){
mean = n*p
return(mean)
}
# aux_variance():
aux_variance = function(n,p){
variance = n*p*(1 - p)
return(variance)
}
# aux_mode():the most likely number of success in n independent trials with probability p
# of success on each trial is m:
aux_mode = function(n,p){
mode = floor(n*p + p)
return(mode)
}
# aux_skewness(): a measure of the asymmetry of the probability distribution of
# a random variable about its mean
aux_skewness = function(n,p){
skewness = (1 - 2*p)/sqrt(n*p*(1 - p))
return(skewness)
}
# aux_kurtosis()
aux_kurtosis = function(n,p){
kurtosis = (1 - 6*p*(1 - p))/(n*p*(1 - p))
return(kurtosis)
}
# 1.3) Function bin_choose()
#' @title Binomial combinations
#' @description calculates the number of combinations in which k successes can occur in n trials
#' @param n number of fixed trials
#' @param k the number of successes out of n trials
#' @return numeric
#' @export
#' @examples
#' bin_choose(n = 5, k = 2)
#' bin_choose(5, 0)
#' bin_choose(5, 1:3)
bin_choose = function(n,k) {
if (k > n) {
stop("\n k cannot be greater than n")
}
combination = factorial(n)/(factorial(k)*factorial(n - k))
return(combination)
}
# 1.4) Function bin_probability()
#' @title Binomial Probability
#' @description calculates probabilities about the number of successes in a fixed number of random trials performed
#' under identical conditions
#' @param trials number of fixed trials
#' @param prob probability of success on each trial
#' @param success the number of successes out of n trials
#' @return numeric
#' @export
#' @examples
#' probability of getting 2 successes in 5 trials (assuming prob of success = 0.5)
#' bin_probability(success = 0:2, trials = 5, prob = 0.5)
#' probabilities of getting 2 or less successes in 5 trials (assuming prob of success = 0.5)
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#' 55 heads in 100 tosses of a loaded coin with 45% chance of heads
#' bin_probability(success = 55, trials = 100, prob = 0.45)
bin_probability = function(success, trials, prob){
check_success(success,trials)
check_prob(prob)
check_trials(trials)
prob = bin_choose(trials,success)*(prob^success)*((1-prob)^(trials-success))
return(prob)
}
# 1.5) Function bin_distribution()
#' @title Binomial Distribution
#' @description calculates sucesses and probabilities about the number of successes in a fixed number of random trials performed
#' under identical conditions
#' @param trials number of fixed trials
#' @param prob probability of success on each trial
#' @return an object of class \code{"bindis"}
#' @export
#' @examples
#' binomial probability distribution
#' bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob){
success = 0:trials
probability = bin_probability(success, trials, prob)
dist = data.frame(success,probability)
class(dist) = c("bindis","data.frame")
return(dist)
}
#' @export
plot.bindis = function(x,...){
barplot(height = x$probability,names.arg = x$success,xlab="Success",ylab="Probability",
main="Binomial Probability Distribution")
}
# 1.6) Function bin_cumulative()
#' @title Binomial Cumulative
#' @description calculates the cumulative probability of successes. It generates a data frame
#' with both the probability distribution and the cumulative probabilities:
#' sucesses in the first column, probability in the second column, and cumulative in the third column.
#' @param trials number of fixed trials
#' @param prob probability of success on each trial
#' @return an object of class \code{"bincum"}
#' @export
#' @examples
#' binomial cumulative distribution
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative = function(trials, prob){
cum = bin_distribution(trials, prob)
cumulative = rep(0,trials+1)
cumulative[1] = cum$probability[1]
for (i in 2:(trials+1)){
cumulative[i] = cumulative[i-1] + cum$probability[i]
}
cum$cumulative = cumulative
class(cum) = c("bincum","data.frame")
return(cum)
}
#' @export
plot.bincum = function(x,...){
plot(x = x$success, y = x$cumulative,xlab="Successes",ylab="Probability",
main="Binomial Probability Distribution")
lines(x = x$success, y = x$cumulative)
}
# 1.7) Function bin_variable()
#' @title Binomial Variable
#' @description takes in trials and prob and returns a list with trials:
#' number of trials and prob: probability of success.
#' @param trials number of fixed trials
#' @param prob probability of success on each trial
#' @return an object of class \code{"binvar"}
#' @export
#' @examples
bin_variable = function(trials, prob){
check_prob(prob)
check_trials(trials)
var = list(trials = trials, prob = prob)
class(var) = "binvar"
return(var)
}
print.binvar = function(x,...){
cat('"Binomial variable" \n\n')
cat('Parameters \n')
cat(sprintf("- number of trials: %s", x$trials[1]), "\n")
cat(sprintf("- prob of success: %s", x$prob[1]), "\n")
}
#' @export
summary.binvar = function(x,...){
var_list = list(trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials[1],x$prob[1]),
variance = aux_variance(x$trials[1],x$prob[1]),
mode = aux_mode(x$trials[1],x$prob[1]),
skewness = aux_skewness(x$trials[1],x$prob[1]),
kurtosis = aux_kurtosis(x$trials[1],x$prob[1]))
class(var_list) = "summary.binvar"
return(var_list)
}
#' @export
print.summary.binvar = function(x,...){
cat('"Summary variable" \n\n')
cat('Parameters \n')
cat(sprintf("- number of trials: %s", x$trials[1]), "\n")
cat(sprintf("- prob of success: %s", x$prob[1]), "\n\n")
cat('Measures \n')
cat(sprintf("- mean: %s",summary.binvar(x)[[3]]), "\n")
cat(sprintf("- variance: %s", summary.binvar(x)[[4]]), "\n")
cat(sprintf("- mode: %s",summary.binvar(x)[[5]]), "\n")
cat(sprintf("- skewness: %0.7f", summary.binvar(x)[[6]]), "\n")
cat(sprintf("- kurtosis: %0.7f",summary.binvar(x)[[7]]), "\n")
}
## 1.8) Functions of measures
bin_mean = function(trials,prob){
check_trials(trials)
check_prob(prob)
mean = aux_mean(trials,prob)
return(mean)
}
bin_variance = function(trials,prob){
check_trials(trials)
check_prob(prob)
variance = aux_variance(trials,prob)
return(variance)
}
bin_mode = function(trials,prob){
check_trials(trials)
check_prob(prob)
mode = aux_mode(trials,prob)
return(mode)
}
bin_skewness = function(trials,prob){
check_trials(trials)
check_prob(prob)
skewness = aux_skewness(trials,prob)
return(skewness)
}
bin_kurtosis = function(trials,prob){
check_trials(trials)
check_prob(prob)
kurtosis = aux_kurtosis(trials,prob)
return(kurtosis)
}
devtools::document()
bin_kurtosis = function(trials,prob){
check_trials(trials)
check_prob(prob)
kurtosis = aux_kurtosis(trials,prob)
return(kurtosis)
}
devtools::document()
# =====================================================
# Devtools workflow
library(devtools)
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::document()          # generate documentation
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::document()
getwd()
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
bin_choose(3,2)
combination = bin_choose(n = 5, k = 2)
combination
